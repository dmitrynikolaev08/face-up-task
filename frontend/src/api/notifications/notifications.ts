/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Face Up Task API
 * API documentation for Face Up Task
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApiNotificationsParams,
  Notification,
  PostApiNotificationsBody
} from '.././model'
import { customInstance } from '../../lib/axios';



/**
 * @summary Create a new notification
 */
export const postApiNotifications = (
    postApiNotificationsBody: PostApiNotificationsBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiNotificationsBody.userId !== undefined) {
 formData.append('userId', postApiNotificationsBody.userId)
 }
if(postApiNotificationsBody.message !== undefined) {
 formData.append('message', postApiNotificationsBody.message)
 }
if(postApiNotificationsBody.files !== undefined) {
 postApiNotificationsBody.files.forEach(value => formData.append('files', value));
 }

      return customInstance<Notification>(
      {url: `/api/notifications`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiNotificationsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNotifications>>, TError,{data: PostApiNotificationsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiNotifications>>, TError,{data: PostApiNotificationsBody}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiNotifications>>, {data: PostApiNotificationsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiNotifications(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiNotificationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiNotifications>>>
    export type PostApiNotificationsMutationBody = PostApiNotificationsBody
    export type PostApiNotificationsMutationError = unknown

    /**
 * @summary Create a new notification
 */
export const usePostApiNotifications = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNotifications>>, TError,{data: PostApiNotificationsBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiNotifications>>,
        TError,
        {data: PostApiNotificationsBody},
        TContext
      > => {

      const mutationOptions = getPostApiNotificationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get all notifications
 */
export const getApiNotifications = (
    params?: GetApiNotificationsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Notification[]>(
      {url: `/api/notifications`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiNotificationsQueryKey = (params?: GetApiNotificationsParams,) => {
    return [`/api/notifications`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiNotificationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiNotifications>>, TError = unknown>(params?: GetApiNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotifications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiNotificationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiNotifications>>> = ({ signal }) => getApiNotifications(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiNotifications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiNotifications>>>
export type GetApiNotificationsQueryError = unknown


export function useGetApiNotifications<TData = Awaited<ReturnType<typeof getApiNotifications>>, TError = unknown>(
 params: undefined |  GetApiNotificationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotifications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiNotifications>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiNotifications<TData = Awaited<ReturnType<typeof getApiNotifications>>, TError = unknown>(
 params?: GetApiNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotifications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiNotifications>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiNotifications<TData = Awaited<ReturnType<typeof getApiNotifications>>, TError = unknown>(
 params?: GetApiNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotifications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all notifications
 */

export function useGetApiNotifications<TData = Awaited<ReturnType<typeof getApiNotifications>>, TError = unknown>(
 params?: GetApiNotificationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiNotifications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiNotificationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete a notification
 */
export const deleteApiNotifications = (
    
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/notifications`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiNotificationsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiNotifications>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiNotifications>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiNotifications>>, void> = () => {
          

          return  deleteApiNotifications()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiNotificationsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiNotifications>>>
    
    export type DeleteApiNotificationsMutationError = void

    /**
 * @summary Delete a notification
 */
export const useDeleteApiNotifications = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiNotifications>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiNotifications>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiNotificationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    